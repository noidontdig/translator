Java to C++ Translator, v. 2.3.1, (C) 2012 qimpp
Processing TestNotExpression.java ...
CompilationUnit(
  PackageDeclaration(
    null,
    QualifiedIdentifier(
      "qimpp",
      "tests"
    )
  ),
  ClassDeclaration(
    Modifiers(
      Modifier(
        "public"
      )
    ),
    "TestNotExpression",
    null,
    null,
    null,
    ClassBody(
      MethodDeclaration(
        Modifiers(
          Modifier(
            "public"
          ),
          Modifier(
            "static"
          )
        ),
        null,
        VoidType(),
        "main",
        FormalParameters(
          FormalParameter(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "String"
              ),
              null
            ),
            null,
            "args",
            Dimensions(
              "["
            )
          )
        ),
        null,
        null,
        Block(
          FieldDeclaration(
            Modifiers(),
            Type(
              PrimitiveType(
                "boolean"
              ),
              null
            ),
            Declarators(
              Declarator(
                "awesome",
                null,
                BooleanLiteral(
                  "false"
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              PrimitiveType(
                "boolean"
              ),
              null
            ),
            Declarators(
              Declarator(
                "sweet",
                null,
                BooleanLiteral(
                  "true"
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              PrimitiveType(
                "boolean"
              ),
              null
            ),
            Declarators(
              Declarator(
                "statement",
                null,
                null
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                AdditiveExpression(
                  StringLiteral(
                    "\"awesome = \""
                  ),
                  "+",
                  PrimaryIdentifier(
                    "awesome"
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                AdditiveExpression(
                  StringLiteral(
                    "\"sweet = \""
                  ),
                  "+",
                  PrimaryIdentifier(
                    "sweet"
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                StringLiteral(
                  "\"Not awesome\""
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                LogicalNegationExpression(
                  PrimaryIdentifier(
                    "awesome"
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                StringLiteral(
                  "\"Not awesome and not sweet\""
                )
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "statement"
              ),
              "=",
              LogicalAndExpression(
                LogicalNegationExpression(
                  PrimaryIdentifier(
                    "awesome"
                  )
                ),
                LogicalNegationExpression(
                  PrimaryIdentifier(
                    "sweet"
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                PrimaryIdentifier(
                  "statement"
                )
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "statement"
              ),
              "=",
              LogicalOrExpression(
                LogicalNegationExpression(
                  PrimaryIdentifier(
                    "awesome"
                  )
                ),
                LogicalNegationExpression(
                  PrimaryIdentifier(
                    "sweet"
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                StringLiteral(
                  "\"Not awesome or not sweet\""
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                PrimaryIdentifier(
                  "statement"
                )
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "statement"
              ),
              "=",
              LogicalNegationExpression(
                LogicalAndExpression(
                  PrimaryIdentifier(
                    "awesome"
                  ),
                  PrimaryIdentifier(
                    "sweet"
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                StringLiteral(
                  "\"Not (awesome and  sweet)\""
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                PrimaryIdentifier(
                  "statement"
                )
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "statement"
              ),
              "=",
              LogicalNegationExpression(
                LogicalOrExpression(
                  PrimaryIdentifier(
                    "awesome"
                  ),
                  PrimaryIdentifier(
                    "sweet"
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                StringLiteral(
                  "\"Not (awesome or  sweet)\""
                )
              )
            )
          ),
          ExpressionStatement(
            CallExpression(
              SelectionExpression(
                PrimaryIdentifier(
                  "System"
                ),
                "out"
              ),
              null,
              "println",
              Arguments(
                PrimaryIdentifier(
                  "statement"
                )
              )
            )
          )
        )
      )
    )
  )
)
