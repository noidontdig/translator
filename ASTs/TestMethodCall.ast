Java to C++ Translator, v. 2.3.1, (C) 2012 qimpp
Processing TestMethodCall.java ...
CompilationUnit(
  PackageDeclaration(
    null,
    QualifiedIdentifier(
      "qimpp",
      "tests"
    )
  ),
  ClassDeclaration(
    Modifiers(
      Modifier(
        "public"
      )
    ),
    "TestMethodCall",
    null,
    null,
    null,
    ClassBody(
      FieldDeclaration(
        Modifiers(
          Modifier(
            "public"
          ),
          Modifier(
            "static"
          )
        ),
        Type(
          QualifiedIdentifier(
            "Object"
          ),
          null
        ),
        Declarators(
          Declarator(
            "R1",
            null,
            NewClassExpression(
              null,
              null,
              QualifiedIdentifier(
                "Object"
              ),
              Arguments(),
              null
            )
          )
        )
      ),
      FieldDeclaration(
        Modifiers(
          Modifier(
            "public"
          ),
          Modifier(
            "static"
          )
        ),
        Type(
          QualifiedIdentifier(
            "Object"
          ),
          null
        ),
        Declarators(
          Declarator(
            "R2",
            null,
            NewClassExpression(
              null,
              null,
              QualifiedIdentifier(
                "Object"
              ),
              Arguments(),
              null
            )
          )
        )
      ),
      FieldDeclaration(
        Modifiers(
          Modifier(
            "public"
          ),
          Modifier(
            "static"
          )
        ),
        Type(
          QualifiedIdentifier(
            "Object"
          ),
          null
        ),
        Declarators(
          Declarator(
            "R3",
            null,
            NewClassExpression(
              null,
              null,
              QualifiedIdentifier(
                "Object"
              ),
              Arguments(),
              null
            )
          )
        )
      ),
      FieldDeclaration(
        Modifiers(
          Modifier(
            "public"
          ),
          Modifier(
            "static"
          )
        ),
        Type(
          QualifiedIdentifier(
            "Object"
          ),
          null
        ),
        Declarators(
          Declarator(
            "R4",
            null,
            NewClassExpression(
              null,
              null,
              QualifiedIdentifier(
                "Object"
              ),
              Arguments(),
              null
            )
          )
        )
      ),
      BlockDeclaration(
        "static",
        Block(
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "R1"
              ),
              "=",
              NewClassExpression(
                null,
                null,
                QualifiedIdentifier(
                  "Object"
                ),
                Arguments(),
                null
              )
            )
          )
        )
      ),
      ConstructorDeclaration(
        Modifiers(
          Modifier(
            "public"
          )
        ),
        null,
        "TestMethodCall",
        FormalParameters(),
        null,
        Block()
      ),
      MethodDeclaration(
        Modifiers(
          Modifier(
            "public"
          ),
          Modifier(
            "static"
          )
        ),
        null,
        VoidType(),
        "main",
        FormalParameters(
          FormalParameter(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "String"
              ),
              Dimensions(
                "["
              )
            ),
            null,
            "args",
            null
          )
        ),
        null,
        null,
        Block(
          FieldDeclaration(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "String"
              ),
              null
            ),
            Declarators(
              Declarator(
                "s2",
                null,
                null
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "s2"
              ),
              "=",
              StringLiteral(
                "\"hello\""
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "String"
              ),
              null
            ),
            Declarators(
              Declarator(
                "s1",
                null,
                StringLiteral(
                  "\"hello\""
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "TestMethodCall"
              ),
              null
            ),
            Declarators(
              Declarator(
                "t",
                null,
                NewClassExpression(
                  null,
                  null,
                  QualifiedIdentifier(
                    "TestMethodCall"
                  ),
                  Arguments(),
                  null
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "Object"
              ),
              null
            ),
            Declarators(
              Declarator(
                "o",
                null,
                NewClassExpression(
                  null,
                  null,
                  QualifiedIdentifier(
                    "Object"
                  ),
                  Arguments(),
                  null
                )
              )
            )
          ),
          ConditionalStatement(
            CallExpression(
              PrimaryIdentifier(
                "s1"
              ),
              null,
              "equals",
              Arguments(
                PrimaryIdentifier(
                  "s2"
                )
              )
            ),
            ExpressionStatement(
              CallExpression(
                SelectionExpression(
                  PrimaryIdentifier(
                    "System"
                  ),
                  "out"
                ),
                null,
                "println",
                Arguments(
                  StringLiteral(
                    "\"Equals\""
                  )
                )
              )
            ),
            ExpressionStatement(
              CallExpression(
                SelectionExpression(
                  PrimaryIdentifier(
                    "System"
                  ),
                  "out"
                ),
                null,
                "println",
                Arguments(
                  StringLiteral(
                    "\"Not Equals\""
                  )
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "Class"
              ),
              null
            ),
            Declarators(
              Declarator(
                "k1",
                null,
                CallExpression(
                  PrimaryIdentifier(
                    "t"
                  ),
                  null,
                  "getClass",
                  Arguments()
                )
              )
            )
          ),
          FieldDeclaration(
            Modifiers(),
            Type(
              QualifiedIdentifier(
                "Class"
              ),
              null
            ),
            Declarators(
              Declarator(
                "k2",
                null,
                CallExpression(
                  PrimaryIdentifier(
                    "s1"
                  ),
                  null,
                  "getClass",
                  Arguments()
                )
              )
            )
          ),
          ConditionalStatement(
            EqualityExpression(
              PrimaryIdentifier(
                "k1"
              ),
              "!=",
              PrimaryIdentifier(
                "k2"
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"PASS k1 != k2\""
                    )
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"FAIL K1 != k2\""
                    )
                  )
                )
              )
            )
          ),
          ConditionalStatement(
            CallExpression(
              CallExpression(
                PrimaryIdentifier(
                  "k1"
                ),
                null,
                "getName",
                Arguments()
              ),
              null,
              "equals",
              Arguments(
                StringLiteral(
                  "\"xtc.oop.Test\""
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"PASS k1.getName().equals(\\\"xtc.oop.Test\\\")\""
                    )
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"FAIL k1.getName().equals(\\\"xtc.oop.Test\\\")\""
                    )
                  )
                )
              )
            )
          ),
          ConditionalStatement(
            CallExpression(
              StringLiteral(
                "\"xtc.oop.Test\""
              ),
              null,
              "equals",
              Arguments(
                CallExpression(
                  PrimaryIdentifier(
                    "k1"
                  ),
                  null,
                  "getName",
                  Arguments()
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"PASS \\\"xtc.oop.Test\\\".equals(k1.getName())\""
                    )
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"FAIL \\\"xtc.oop.Test\\\".equals(k1.getName())\""
                    )
                  )
                )
              )
            )
          ),
          ConditionalStatement(
            CallExpression(
              CallExpression(
                PrimaryIdentifier(
                  "k1"
                ),
                null,
                "toString",
                Arguments()
              ),
              null,
              "equals",
              Arguments(
                StringLiteral(
                  "\"class xtc.oop.Test\""
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"PASS k1.toString().equals(\\\"class xtc.oop.Test\\\")\""
                    )
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"FAIL k1.toString().equals(\\\"class xtc.oop.Test\\\")\""
                    )
                  )
                )
              )
            )
          ),
          ConditionalStatement(
            LogicalNegationExpression(
              CallExpression(
                PrimaryIdentifier(
                  "k1"
                ),
                null,
                "equals",
                Arguments(
                  PrimaryIdentifier(
                    "k2"
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"PASS ! k1.equals(k2)\""
                    )
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"FAIL ! k1.equals(k2)\""
                    )
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "k2"
              ),
              "=",
              PrimaryIdentifier(
                "k1"
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "k1"
              ),
              "=",
              CallExpression(
                PrimaryIdentifier(
                  "k1"
                ),
                null,
                "getSuperclass",
                Arguments()
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "k2"
              ),
              "=",
              CallExpression(
                PrimaryIdentifier(
                  "k2"
                ),
                null,
                "getSuperclass",
                Arguments()
              )
            )
          ),
          ConditionalStatement(
            EqualityExpression(
              PrimaryIdentifier(
                "k1"
              ),
              "==",
              PrimaryIdentifier(
                "k2"
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"PASS k1.super() == k2.super().super()\""
                    )
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"FAIL K1.super() == k2.super().super()\""
                    )
                  )
                )
              )
            )
          ),
          ConditionalStatement(
            CallExpression(
              PrimaryIdentifier(
                "k1"
              ),
              null,
              "equals",
              Arguments(
                PrimaryIdentifier(
                  "k2"
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"PASS k1.super().equals(k2.super().super())\""
                    )
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"FAIL k1.super().equals(k2.super().super())\""
                    )
                  )
                )
              )
            )
          ),
          ExpressionStatement(
            Expression(
              PrimaryIdentifier(
                "k1"
              ),
              "=",
              CallExpression(
                PrimaryIdentifier(
                  "k1"
                ),
                null,
                "getSuperclass",
                Arguments()
              )
            )
          ),
          ConditionalStatement(
            EqualityExpression(
              NullLiteral(),
              "==",
              PrimaryIdentifier(
                "k1"
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"PASS null == k1.super().super()\""
                    )
                  )
                )
              )
            ),
            Block(
              ExpressionStatement(
                CallExpression(
                  SelectionExpression(
                    PrimaryIdentifier(
                      "System"
                    ),
                    "out"
                  ),
                  null,
                  "println",
                  Arguments(
                    StringLiteral(
                      "\"FAIL null == k1.super().super()\""
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
